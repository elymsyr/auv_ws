<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro">

  <!-- MACRO FOR THRUSTER UNITS  -->
  
  <!-- Provide the propeller mesh in a separate file with the rotation axis
  over propeller's frame X-axis in DAE (Collada) or STL format.
  -->
  <xacro:property name="prop_mesh_file" value="file://$(find gazebo_sim)/urdf/meshes/LAUV/propeller.dae"/>

  <!--
    Thruster macro with integration of joint and link. The thrusters should
    be initialized in the actuators.xacro file.
  -->
  <xacro:macro name="thruster_macro" params="thruster_id *origin">

    <!--
    Dummy link as place holder for the thruster frame,
    since thrusters can often be inside the collision geometry
    of the vehicle and may cause internal collisions if set otherwise
    -->
    <link name="thruster_${thruster_id}">

      <visual>
        <geometry>
          <mesh filename="${prop_mesh_file}" scale="1 1 1" />
        </geometry>
      </visual>

      <inertial>
        <mass value="0.001" />
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <inertia ixx="0.000000017" ixy="0.0" ixz="0.0"
               iyy="0.000000017" iyz="0.0"
               izz="0.000000017" />
      </inertial>
    </link>

    <!-- Joint between thruster link and vehicle base link -->
    <joint name="thruster_${thruster_id}_joint" type="continuous">
      <xacro:insert_block name="origin" />
      <axis xyz="1 0 0" />
      <parent link="base_link" />
      <child link="thruster_${thruster_id}" />
    </joint>

    <gazebo>
      <!-- Thruster ROS plugin -->
      <plugin name="_${thruster_id}_thruster_model" filename="libuuv_thruster_ros_plugin.so">
        <!-- Name of the thruster link -->
        <linkName>thruster_${thruster_id}</linkName>

        <!-- Name of the joint between thruster and vehicle base link -->
        <jointName>thruster_${thruster_id}_joint</jointName>

        <!-- Make the thruster aware of its id -->
        <thrusterID>${thruster_id}</thrusterID>

        <!-- Gain of the input command signal -->
        <gain>1</gain>

        <!-- Maximum allowed input value for the input signal for thruster unit -->
        <clampMax>-3000</clampMax>

        <!-- Minimum allowed value for the input signal for thruster unit -->
        <clampMin>3000</clampMin>

        <!-- Minimum and maximum thrust force output allowed -->
        <thrustMin>-50</thrustMin>
        <thrustMax>50</thrustMax>

        <!--
        Value from 0 to 1 to set the efficiency of the output thrust force
        Default value is 1.0
        -->
        <thrust_efficiency>1</thrust_efficiency>

        <!--
        Value from 0 to 1 to set the efficiency of the propeller as a factor
        to be multiplied to the current value of the state variable at each
        iteration.
        Default value is 1.0
        -->
        <propeller_efficiency>1</propeller_efficiency>

        <dynamics>
          <type>FirstOrder</type>
          <timeConstant>0.05</timeConstant>
        </dynamics>

        <conversion>
          <type>Basic</type>
          <rotorConstant>0.0002</rotorConstant>
        </conversion>        

      </plugin>
    </gazebo>

    <gazebo reference="thruster_${thruster_id}">
      <selfCollide>false</selfCollide>
    </gazebo>
  </xacro:macro>

  <!-- Dummy inertial block for links that should be mass-less -->
  <xacro:macro name="no_inertial">
    <xacro:box_inertial x="0" y="0" z="0" mass="0.0001">
      <origin xyz="0 0 0" rpy="0 0 0"/>
    </xacro:box_inertial>
  </xacro:macro>  

   <!-- Fin snippet using the quadratic lift and drag model -->
  <xacro:macro name="fin_quadratic_macro"
    params="parent_link
            fin_id
            *origin
            min_joint_limit
            max_joint_limit
            mesh_filename
            fin_dynamics_time_constant
            lift_constant
            drag_constant
            current_velocity_topic">

    <joint name="fin${fin_id}_joint" type="revolute">
        <limit effort="0" lower="${min_joint_limit}" upper="${max_joint_limit}" velocity="0"/>
        <xacro:insert_block name="origin"/>
        <axis xyz="0 0 1"/>
        <parent link="${parent_link}" />
        <child link="fin${fin_id}" />
    </joint>

    <link name="fin${fin_id}">
      <xacro:no_inertial />
      <visual>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
          <mesh filename="${mesh_filename}" scale="1 1 1"/>
        </geometry>
      </visual>
    </link>

    <gazebo>
      <plugin name="_fin${fin_id}_model" filename="libuuv_fin_ros_plugin.so">
        <dynamics>
          <type>FirstOrder</type>
          <timeConstant>${fin_dynamics_time_constant}</timeConstant>
        </dynamics>

        <liftdrag>
          <type>Quadratic</type>
          <lift_constant>${lift_constant}</lift_constant>
          <drag_constant>${drag_constant}</drag_constant>
        </liftdrag>

        <current_velocity_topic>${current_velocity_topic}</current_velocity_topic>
        <fin_id>${fin_id}</fin_id>
        <link_name>fin${fin_id}</link_name>
        <joint_name>fin${fin_id}_joint</joint_name>
      </plugin>
    </gazebo>
  </xacro:macro>


  <!-- MACRO FOR FIN/RUDDER UNITS  -->
  
  <!-- A separate mesh for the fin should be stored in the meshes folder -->
  <xacro:property name="black_fin_mesh_file" value="file://$(find gazebo_sim)/urdf/meshes/LAUV/black_fin.dae"/>
  <xacro:property name="red_fin_mesh_file" value="file://$(find gazebo_sim)/urdf/meshes/LAUV/red_fin.dae"/>

  <!-- Fin properties -->
  <xacro:property name="fin_area" value="0.0064"/>
  <xacro:property name="fin_rho" value="1028"/>
  <xacro:property name="fin_lift_coefficient" value="3.0"/>
  <xacro:property name="fin_drag_coefficient" value="1.98"/>
  
  <xacro:macro name="fin_macro" params="fin_id *origin mesh_filename">
      <xacro:fin_quadratic_macro
        parent_link="base_link"
        fin_id="${fin_id}"
        min_joint_limit="${-90.0 * d2r}"
        max_joint_limit="${90.0 * d2r}"
        mesh_filename="${mesh_filename}"
        fin_dynamics_time_constant="0.2"
        lift_constant="${0.5 * fin_rho * fin_area * fin_lift_coefficient}"
        drag_constant="${0.5 * fin_rho * fin_area * fin_drag_coefficient}"
        current_velocity_topic="current_velocity">
        <xacro:insert_block name="origin"/>
      </xacro:fin_quadratic_macro>
  </xacro:macro>

  <!-- <xacro:macro name="fin_macro" params="namespace fin_id *origin mesh_filename">
      <xacro:fin_two_lines_macro
        namespace="${namespace}"
        parent_link="${namespace}/base_link"
        fin_id="${fin_id}"
        min_joint_limit="${-80*d2r}"
        max_joint_limit="${80*d2r}"
        mesh_filename="${mesh_filename}"
        fin_dynamics_time_constant="0.1"
        fin_cross_section_area="${fin_area}"        
        current_velocity_topic="current_velocity"
        fluid_density="1028.0"
        a0="0.0"
        alpha_stall="1.57"
        cla="${0.5 * fin_rho * fin_area * fin_lift_coefficient}"
        cla_stall="0.0"
        cda="${0.5 * fin_rho * fin_area * fin_drag_coefficient}"
        cda_stall="0">
        <xacro:insert_block name="origin"/>
      </xacro:fin_two_lines_macro>
    </xacro:macro> -->

    <!-- <xacro:macro name="fin_macro" params="namespace fin_id *origin mesh_filename">
      <xacro:fin_two_lines_macro
        namespace="${namespace}"
        parent_link="${namespace}/base_link"
        fin_id="${fin_id}"
        min_joint_limit="${-80*d2r}"
        max_joint_limit="${80*d2r}"
        mesh_filename="${mesh_filename}"
        fin_dynamics_time_constant="0.1"
        fin_cross_section_area="${fin_area}"        
        current_velocity_topic="current_velocity"
        fluid_density="1028.0"
        a0="0.0"
        alpha_stall="0.436332313" 
        cla="2.435070629"
        cla_stall="0"
        cda="0"
        cda_stall="0">
        <xacro:insert_block name="origin"/>
      </xacro:fin_two_lines_macro>
    </xacro:macro> -->

    <!-- cla_stall="-1.929963096"
        cda="1.101841914" -->
    
</robot>
